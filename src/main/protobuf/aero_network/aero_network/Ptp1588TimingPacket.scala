// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package aero_network.aero_network



@SerialVersionUID(0L)
final case class Ptp1588TimingPacket(
    macAddress: scala.Option[Long] = None,
    syncReceiveS: scala.Option[Int] = None,
    syncReceiveNs: scala.Option[Int] = None,
    delayRequestSendS: scala.Option[Int] = None,
    delayRequestSendNs: scala.Option[Int] = None,
    delayRequestReceiveS: scala.Option[Int] = None,
    delayRequestReceiveNs: scala.Option[Int] = None,
    offsetFromMasterS: scala.Option[Int] = None,
    offsetFromMasterNs: scala.Option[Int] = None,
    meanPathDelayS: scala.Option[Int] = None,
    meanPathDelayNs: scala.Option[Int] = None,
    masterToSlaveDelayS: scala.Option[Int] = None,
    masterToSlaveDelayNs: scala.Option[Int] = None,
    slaveToMasterDelayS: scala.Option[Int] = None,
    slaveToMasterDelayNs: scala.Option[Int] = None,
    portState: scala.Option[Int] = None,
    experimentId: scala.Option[String] = None,
    timeBucket: scala.Option[Long] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Ptp1588TimingPacket] with com.trueaccord.lenses.Updatable[Ptp1588TimingPacket] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (macAddress.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, macAddress.get) }
      if (syncReceiveS.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, syncReceiveS.get) }
      if (syncReceiveNs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, syncReceiveNs.get) }
      if (delayRequestSendS.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, delayRequestSendS.get) }
      if (delayRequestSendNs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, delayRequestSendNs.get) }
      if (delayRequestReceiveS.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, delayRequestReceiveS.get) }
      if (delayRequestReceiveNs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, delayRequestReceiveNs.get) }
      if (offsetFromMasterS.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(8, offsetFromMasterS.get) }
      if (offsetFromMasterNs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(9, offsetFromMasterNs.get) }
      if (meanPathDelayS.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(10, meanPathDelayS.get) }
      if (meanPathDelayNs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(11, meanPathDelayNs.get) }
      if (masterToSlaveDelayS.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(12, masterToSlaveDelayS.get) }
      if (masterToSlaveDelayNs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(13, masterToSlaveDelayNs.get) }
      if (slaveToMasterDelayS.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(14, slaveToMasterDelayS.get) }
      if (slaveToMasterDelayNs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(15, slaveToMasterDelayNs.get) }
      if (portState.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(16, portState.get) }
      if (experimentId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(17, experimentId.get) }
      if (timeBucket.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(18, timeBucket.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      macAddress.foreach { __v =>
        _output__.writeInt64(1, __v)
      };
      syncReceiveS.foreach { __v =>
        _output__.writeInt32(2, __v)
      };
      syncReceiveNs.foreach { __v =>
        _output__.writeInt32(3, __v)
      };
      delayRequestSendS.foreach { __v =>
        _output__.writeInt32(4, __v)
      };
      delayRequestSendNs.foreach { __v =>
        _output__.writeInt32(5, __v)
      };
      delayRequestReceiveS.foreach { __v =>
        _output__.writeInt32(6, __v)
      };
      delayRequestReceiveNs.foreach { __v =>
        _output__.writeInt32(7, __v)
      };
      offsetFromMasterS.foreach { __v =>
        _output__.writeInt32(8, __v)
      };
      offsetFromMasterNs.foreach { __v =>
        _output__.writeInt32(9, __v)
      };
      meanPathDelayS.foreach { __v =>
        _output__.writeInt32(10, __v)
      };
      meanPathDelayNs.foreach { __v =>
        _output__.writeInt32(11, __v)
      };
      masterToSlaveDelayS.foreach { __v =>
        _output__.writeInt32(12, __v)
      };
      masterToSlaveDelayNs.foreach { __v =>
        _output__.writeInt32(13, __v)
      };
      slaveToMasterDelayS.foreach { __v =>
        _output__.writeInt32(14, __v)
      };
      slaveToMasterDelayNs.foreach { __v =>
        _output__.writeInt32(15, __v)
      };
      portState.foreach { __v =>
        _output__.writeInt32(16, __v)
      };
      experimentId.foreach { __v =>
        _output__.writeString(17, __v)
      };
      timeBucket.foreach { __v =>
        _output__.writeInt64(18, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): aero_network.aero_network.Ptp1588TimingPacket = {
      var __macAddress = this.macAddress
      var __syncReceiveS = this.syncReceiveS
      var __syncReceiveNs = this.syncReceiveNs
      var __delayRequestSendS = this.delayRequestSendS
      var __delayRequestSendNs = this.delayRequestSendNs
      var __delayRequestReceiveS = this.delayRequestReceiveS
      var __delayRequestReceiveNs = this.delayRequestReceiveNs
      var __offsetFromMasterS = this.offsetFromMasterS
      var __offsetFromMasterNs = this.offsetFromMasterNs
      var __meanPathDelayS = this.meanPathDelayS
      var __meanPathDelayNs = this.meanPathDelayNs
      var __masterToSlaveDelayS = this.masterToSlaveDelayS
      var __masterToSlaveDelayNs = this.masterToSlaveDelayNs
      var __slaveToMasterDelayS = this.slaveToMasterDelayS
      var __slaveToMasterDelayNs = this.slaveToMasterDelayNs
      var __portState = this.portState
      var __experimentId = this.experimentId
      var __timeBucket = this.timeBucket
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __macAddress = Some(_input__.readInt64())
          case 16 =>
            __syncReceiveS = Some(_input__.readInt32())
          case 24 =>
            __syncReceiveNs = Some(_input__.readInt32())
          case 32 =>
            __delayRequestSendS = Some(_input__.readInt32())
          case 40 =>
            __delayRequestSendNs = Some(_input__.readInt32())
          case 48 =>
            __delayRequestReceiveS = Some(_input__.readInt32())
          case 56 =>
            __delayRequestReceiveNs = Some(_input__.readInt32())
          case 64 =>
            __offsetFromMasterS = Some(_input__.readInt32())
          case 72 =>
            __offsetFromMasterNs = Some(_input__.readInt32())
          case 80 =>
            __meanPathDelayS = Some(_input__.readInt32())
          case 88 =>
            __meanPathDelayNs = Some(_input__.readInt32())
          case 96 =>
            __masterToSlaveDelayS = Some(_input__.readInt32())
          case 104 =>
            __masterToSlaveDelayNs = Some(_input__.readInt32())
          case 112 =>
            __slaveToMasterDelayS = Some(_input__.readInt32())
          case 120 =>
            __slaveToMasterDelayNs = Some(_input__.readInt32())
          case 128 =>
            __portState = Some(_input__.readInt32())
          case 138 =>
            __experimentId = Some(_input__.readString())
          case 144 =>
            __timeBucket = Some(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      aero_network.aero_network.Ptp1588TimingPacket(
          macAddress = __macAddress,
          syncReceiveS = __syncReceiveS,
          syncReceiveNs = __syncReceiveNs,
          delayRequestSendS = __delayRequestSendS,
          delayRequestSendNs = __delayRequestSendNs,
          delayRequestReceiveS = __delayRequestReceiveS,
          delayRequestReceiveNs = __delayRequestReceiveNs,
          offsetFromMasterS = __offsetFromMasterS,
          offsetFromMasterNs = __offsetFromMasterNs,
          meanPathDelayS = __meanPathDelayS,
          meanPathDelayNs = __meanPathDelayNs,
          masterToSlaveDelayS = __masterToSlaveDelayS,
          masterToSlaveDelayNs = __masterToSlaveDelayNs,
          slaveToMasterDelayS = __slaveToMasterDelayS,
          slaveToMasterDelayNs = __slaveToMasterDelayNs,
          portState = __portState,
          experimentId = __experimentId,
          timeBucket = __timeBucket
      )
    }
    def getMacAddress: Long = macAddress.getOrElse(0L)
    def clearMacAddress: Ptp1588TimingPacket = copy(macAddress = None)
    def withMacAddress(__v: Long): Ptp1588TimingPacket = copy(macAddress = Some(__v))
    def getSyncReceiveS: Int = syncReceiveS.getOrElse(0)
    def clearSyncReceiveS: Ptp1588TimingPacket = copy(syncReceiveS = None)
    def withSyncReceiveS(__v: Int): Ptp1588TimingPacket = copy(syncReceiveS = Some(__v))
    def getSyncReceiveNs: Int = syncReceiveNs.getOrElse(0)
    def clearSyncReceiveNs: Ptp1588TimingPacket = copy(syncReceiveNs = None)
    def withSyncReceiveNs(__v: Int): Ptp1588TimingPacket = copy(syncReceiveNs = Some(__v))
    def getDelayRequestSendS: Int = delayRequestSendS.getOrElse(0)
    def clearDelayRequestSendS: Ptp1588TimingPacket = copy(delayRequestSendS = None)
    def withDelayRequestSendS(__v: Int): Ptp1588TimingPacket = copy(delayRequestSendS = Some(__v))
    def getDelayRequestSendNs: Int = delayRequestSendNs.getOrElse(0)
    def clearDelayRequestSendNs: Ptp1588TimingPacket = copy(delayRequestSendNs = None)
    def withDelayRequestSendNs(__v: Int): Ptp1588TimingPacket = copy(delayRequestSendNs = Some(__v))
    def getDelayRequestReceiveS: Int = delayRequestReceiveS.getOrElse(0)
    def clearDelayRequestReceiveS: Ptp1588TimingPacket = copy(delayRequestReceiveS = None)
    def withDelayRequestReceiveS(__v: Int): Ptp1588TimingPacket = copy(delayRequestReceiveS = Some(__v))
    def getDelayRequestReceiveNs: Int = delayRequestReceiveNs.getOrElse(0)
    def clearDelayRequestReceiveNs: Ptp1588TimingPacket = copy(delayRequestReceiveNs = None)
    def withDelayRequestReceiveNs(__v: Int): Ptp1588TimingPacket = copy(delayRequestReceiveNs = Some(__v))
    def getOffsetFromMasterS: Int = offsetFromMasterS.getOrElse(0)
    def clearOffsetFromMasterS: Ptp1588TimingPacket = copy(offsetFromMasterS = None)
    def withOffsetFromMasterS(__v: Int): Ptp1588TimingPacket = copy(offsetFromMasterS = Some(__v))
    def getOffsetFromMasterNs: Int = offsetFromMasterNs.getOrElse(0)
    def clearOffsetFromMasterNs: Ptp1588TimingPacket = copy(offsetFromMasterNs = None)
    def withOffsetFromMasterNs(__v: Int): Ptp1588TimingPacket = copy(offsetFromMasterNs = Some(__v))
    def getMeanPathDelayS: Int = meanPathDelayS.getOrElse(0)
    def clearMeanPathDelayS: Ptp1588TimingPacket = copy(meanPathDelayS = None)
    def withMeanPathDelayS(__v: Int): Ptp1588TimingPacket = copy(meanPathDelayS = Some(__v))
    def getMeanPathDelayNs: Int = meanPathDelayNs.getOrElse(0)
    def clearMeanPathDelayNs: Ptp1588TimingPacket = copy(meanPathDelayNs = None)
    def withMeanPathDelayNs(__v: Int): Ptp1588TimingPacket = copy(meanPathDelayNs = Some(__v))
    def getMasterToSlaveDelayS: Int = masterToSlaveDelayS.getOrElse(0)
    def clearMasterToSlaveDelayS: Ptp1588TimingPacket = copy(masterToSlaveDelayS = None)
    def withMasterToSlaveDelayS(__v: Int): Ptp1588TimingPacket = copy(masterToSlaveDelayS = Some(__v))
    def getMasterToSlaveDelayNs: Int = masterToSlaveDelayNs.getOrElse(0)
    def clearMasterToSlaveDelayNs: Ptp1588TimingPacket = copy(masterToSlaveDelayNs = None)
    def withMasterToSlaveDelayNs(__v: Int): Ptp1588TimingPacket = copy(masterToSlaveDelayNs = Some(__v))
    def getSlaveToMasterDelayS: Int = slaveToMasterDelayS.getOrElse(0)
    def clearSlaveToMasterDelayS: Ptp1588TimingPacket = copy(slaveToMasterDelayS = None)
    def withSlaveToMasterDelayS(__v: Int): Ptp1588TimingPacket = copy(slaveToMasterDelayS = Some(__v))
    def getSlaveToMasterDelayNs: Int = slaveToMasterDelayNs.getOrElse(0)
    def clearSlaveToMasterDelayNs: Ptp1588TimingPacket = copy(slaveToMasterDelayNs = None)
    def withSlaveToMasterDelayNs(__v: Int): Ptp1588TimingPacket = copy(slaveToMasterDelayNs = Some(__v))
    def getPortState: Int = portState.getOrElse(0)
    def clearPortState: Ptp1588TimingPacket = copy(portState = None)
    def withPortState(__v: Int): Ptp1588TimingPacket = copy(portState = Some(__v))
    def getExperimentId: String = experimentId.getOrElse("")
    def clearExperimentId: Ptp1588TimingPacket = copy(experimentId = None)
    def withExperimentId(__v: String): Ptp1588TimingPacket = copy(experimentId = Some(__v))
    def getTimeBucket: Long = timeBucket.getOrElse(0L)
    def clearTimeBucket: Ptp1588TimingPacket = copy(timeBucket = None)
    def withTimeBucket(__v: Long): Ptp1588TimingPacket = copy(timeBucket = Some(__v))
    def getField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => macAddress.orNull
        case 2 => syncReceiveS.orNull
        case 3 => syncReceiveNs.orNull
        case 4 => delayRequestSendS.orNull
        case 5 => delayRequestSendNs.orNull
        case 6 => delayRequestReceiveS.orNull
        case 7 => delayRequestReceiveNs.orNull
        case 8 => offsetFromMasterS.orNull
        case 9 => offsetFromMasterNs.orNull
        case 10 => meanPathDelayS.orNull
        case 11 => meanPathDelayNs.orNull
        case 12 => masterToSlaveDelayS.orNull
        case 13 => masterToSlaveDelayNs.orNull
        case 14 => slaveToMasterDelayS.orNull
        case 15 => slaveToMasterDelayNs.orNull
        case 16 => portState.orNull
        case 17 => experimentId.orNull
        case 18 => timeBucket.orNull
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = aero_network.aero_network.Ptp1588TimingPacket
}

object Ptp1588TimingPacket extends com.trueaccord.scalapb.GeneratedMessageCompanion[aero_network.aero_network.Ptp1588TimingPacket] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[aero_network.aero_network.Ptp1588TimingPacket] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): aero_network.aero_network.Ptp1588TimingPacket = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    aero_network.aero_network.Ptp1588TimingPacket(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(17)).asInstanceOf[scala.Option[Long]]
    )
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AeroNetworkProto.javaDescriptor.getMessageTypes.get(0)
  def messageCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = aero_network.aero_network.Ptp1588TimingPacket(
  )
  implicit class Ptp1588TimingPacketLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, aero_network.aero_network.Ptp1588TimingPacket]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, aero_network.aero_network.Ptp1588TimingPacket](_l) {
    def macAddress: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMacAddress)((c_, f_) => c_.copy(macAddress = Some(f_)))
    def optionalMacAddress: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.macAddress)((c_, f_) => c_.copy(macAddress = f_))
    def syncReceiveS: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getSyncReceiveS)((c_, f_) => c_.copy(syncReceiveS = Some(f_)))
    def optionalSyncReceiveS: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.syncReceiveS)((c_, f_) => c_.copy(syncReceiveS = f_))
    def syncReceiveNs: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getSyncReceiveNs)((c_, f_) => c_.copy(syncReceiveNs = Some(f_)))
    def optionalSyncReceiveNs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.syncReceiveNs)((c_, f_) => c_.copy(syncReceiveNs = f_))
    def delayRequestSendS: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getDelayRequestSendS)((c_, f_) => c_.copy(delayRequestSendS = Some(f_)))
    def optionalDelayRequestSendS: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.delayRequestSendS)((c_, f_) => c_.copy(delayRequestSendS = f_))
    def delayRequestSendNs: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getDelayRequestSendNs)((c_, f_) => c_.copy(delayRequestSendNs = Some(f_)))
    def optionalDelayRequestSendNs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.delayRequestSendNs)((c_, f_) => c_.copy(delayRequestSendNs = f_))
    def delayRequestReceiveS: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getDelayRequestReceiveS)((c_, f_) => c_.copy(delayRequestReceiveS = Some(f_)))
    def optionalDelayRequestReceiveS: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.delayRequestReceiveS)((c_, f_) => c_.copy(delayRequestReceiveS = f_))
    def delayRequestReceiveNs: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getDelayRequestReceiveNs)((c_, f_) => c_.copy(delayRequestReceiveNs = Some(f_)))
    def optionalDelayRequestReceiveNs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.delayRequestReceiveNs)((c_, f_) => c_.copy(delayRequestReceiveNs = f_))
    def offsetFromMasterS: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getOffsetFromMasterS)((c_, f_) => c_.copy(offsetFromMasterS = Some(f_)))
    def optionalOffsetFromMasterS: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.offsetFromMasterS)((c_, f_) => c_.copy(offsetFromMasterS = f_))
    def offsetFromMasterNs: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getOffsetFromMasterNs)((c_, f_) => c_.copy(offsetFromMasterNs = Some(f_)))
    def optionalOffsetFromMasterNs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.offsetFromMasterNs)((c_, f_) => c_.copy(offsetFromMasterNs = f_))
    def meanPathDelayS: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getMeanPathDelayS)((c_, f_) => c_.copy(meanPathDelayS = Some(f_)))
    def optionalMeanPathDelayS: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.meanPathDelayS)((c_, f_) => c_.copy(meanPathDelayS = f_))
    def meanPathDelayNs: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getMeanPathDelayNs)((c_, f_) => c_.copy(meanPathDelayNs = Some(f_)))
    def optionalMeanPathDelayNs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.meanPathDelayNs)((c_, f_) => c_.copy(meanPathDelayNs = f_))
    def masterToSlaveDelayS: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getMasterToSlaveDelayS)((c_, f_) => c_.copy(masterToSlaveDelayS = Some(f_)))
    def optionalMasterToSlaveDelayS: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.masterToSlaveDelayS)((c_, f_) => c_.copy(masterToSlaveDelayS = f_))
    def masterToSlaveDelayNs: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getMasterToSlaveDelayNs)((c_, f_) => c_.copy(masterToSlaveDelayNs = Some(f_)))
    def optionalMasterToSlaveDelayNs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.masterToSlaveDelayNs)((c_, f_) => c_.copy(masterToSlaveDelayNs = f_))
    def slaveToMasterDelayS: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getSlaveToMasterDelayS)((c_, f_) => c_.copy(slaveToMasterDelayS = Some(f_)))
    def optionalSlaveToMasterDelayS: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.slaveToMasterDelayS)((c_, f_) => c_.copy(slaveToMasterDelayS = f_))
    def slaveToMasterDelayNs: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getSlaveToMasterDelayNs)((c_, f_) => c_.copy(slaveToMasterDelayNs = Some(f_)))
    def optionalSlaveToMasterDelayNs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.slaveToMasterDelayNs)((c_, f_) => c_.copy(slaveToMasterDelayNs = f_))
    def portState: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getPortState)((c_, f_) => c_.copy(portState = Some(f_)))
    def optionalPortState: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.portState)((c_, f_) => c_.copy(portState = f_))
    def experimentId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getExperimentId)((c_, f_) => c_.copy(experimentId = Some(f_)))
    def optionalExperimentId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.experimentId)((c_, f_) => c_.copy(experimentId = f_))
    def timeBucket: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getTimeBucket)((c_, f_) => c_.copy(timeBucket = Some(f_)))
    def optionalTimeBucket: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.timeBucket)((c_, f_) => c_.copy(timeBucket = f_))
  }
  final val MAC_ADDRESS_FIELD_NUMBER = 1
  final val SYNC_RECEIVE_S_FIELD_NUMBER = 2
  final val SYNC_RECEIVE_NS_FIELD_NUMBER = 3
  final val DELAY_REQUEST_SEND_S_FIELD_NUMBER = 4
  final val DELAY_REQUEST_SEND_NS_FIELD_NUMBER = 5
  final val DELAY_REQUEST_RECEIVE_S_FIELD_NUMBER = 6
  final val DELAY_REQUEST_RECEIVE_NS_FIELD_NUMBER = 7
  final val OFFSET_FROM_MASTER_S_FIELD_NUMBER = 8
  final val OFFSET_FROM_MASTER_NS_FIELD_NUMBER = 9
  final val MEAN_PATH_DELAY_S_FIELD_NUMBER = 10
  final val MEAN_PATH_DELAY_NS_FIELD_NUMBER = 11
  final val MASTER_TO_SLAVE_DELAY_S_FIELD_NUMBER = 12
  final val MASTER_TO_SLAVE_DELAY_NS_FIELD_NUMBER = 13
  final val SLAVE_TO_MASTER_DELAY_S_FIELD_NUMBER = 14
  final val SLAVE_TO_MASTER_DELAY_NS_FIELD_NUMBER = 15
  final val PORT_STATE_FIELD_NUMBER = 16
  final val EXPERIMENT_ID_FIELD_NUMBER = 17
  final val TIME_BUCKET_FIELD_NUMBER = 18
}
